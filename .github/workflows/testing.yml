name: Comprehensive Testing

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main ]
  schedule:
    # يشغل الاختبارات المكثفة يوميًا في 2:00 صباحًا UTC
    - cron: '0 2 * * *'

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./doctor_call_app_v2
    
    strategy:
      matrix:
        flutter-version: ['3.35.3']
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Flutter ${{ matrix.flutter-version }}
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ matrix.flutter-version }}
          channel: 'stable'
          
      - name: Get dependencies
        run: flutter pub get
        
      - name: Run AuthService tests
        run: flutter test test/unit/auth_service_test.dart --coverage
        
      - name: Run GameService tests
        run: flutter test test/unit/game_service_test.dart --coverage
        
      - name: Run PatientService tests
        run: flutter test test/unit/patient_service_test.dart --coverage
        
      - name: Run HospitalService tests
        run: flutter test test/unit/hospital_service_test.dart --coverage
        
      - name: Run AuthProvider tests
        run: flutter test test/unit/auth_provider_test.dart --coverage
        
      - name: Generate coverage report
        run: |
          flutter test --coverage
          genhtml coverage/lcov.info -o coverage/html
          
      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-flutter-${{ matrix.flutter-version }}
          path: coverage/

  widget-tests:
    name: Widget Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    defaults:
      run:
        working-directory: ./doctor_call_app_v2
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.35.3'
          channel: 'stable'
          
      - name: Get dependencies
        run: flutter pub get
        
      - name: Run widget tests
        run: flutter test test/widget/ --coverage
        
      - name: Screenshot tests (if implemented)
        run: flutter test --update-goldens test/widget/
        continue-on-error: true

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: widget-tests
    
    strategy:
      matrix:
        device: ['web-server', 'chrome']
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.19.0'
          channel: 'stable'
          
      - name: Get dependencies
        run: flutter pub get
        
      - name: Start web server (if web testing)
        if: matrix.device == 'web-server'
        run: |
          flutter build web
          cd build/web
          python3 -m http.server 8080 &
          sleep 5
          
      - name: Run integration tests
        run: |
          if [ "${{ matrix.device }}" == "web-server" ]; then
            flutter drive --driver=test_driver/integration_test.dart --target=integration_test/app_test.dart -d web-server --web-port=8080
          else
            flutter drive --driver=test_driver/integration_test.dart --target=integration_test/app_test.dart -d chrome
          fi

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.19.0'
          channel: 'stable'
          
      - name: Get dependencies
        run: flutter pub get
        
      - name: Build profile version
        run: flutter build web --profile
        
      - name: Performance analysis
        run: |
          # إضافة اختبارات الأداء هنا
          echo "Running performance benchmarks..."
          flutter test test/performance/ --coverage
          
      - name: Memory leak detection
        run: |
          # فحص تسريب الذاكرة
          echo "Checking for memory leaks..."
          flutter test test/memory/ --coverage

  api-tests:
    name: API Integration Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: doctor_call_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.19.0'
          channel: 'stable'
          
      - name: Get dependencies
        run: flutter pub get
        
      - name: Setup test database
        run: |
          # إعداد قاعدة البيانات للاختبار
          PGPASSWORD=postgres psql -h localhost -U postgres -d doctor_call_test -c "CREATE EXTENSION IF NOT EXISTS uuid-ossp;"
          
      - name: Run API integration tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/doctor_call_test
          API_BASE_URL: http://localhost:3000
        run: flutter test test/integration/api/ --coverage

  quality-checks:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.19.0'
          channel: 'stable'
          
      - name: Get dependencies
        run: flutter pub get
        
      - name: Dart analysis
        run: dart analyze --fatal-infos --fatal-warnings
        
      - name: Format check
        run: dart format --output=none --set-exit-if-changed .
        
      - name: Pub dependencies check
        run: dart pub deps
        
      - name: Check for outdated dependencies
        run: flutter pub outdated --exit-if-update-available
        continue-on-error: true
        
      - name: Import sorter check
        run: dart run import_sorter:main --no-comments --exit-if-changed
        continue-on-error: true

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, widget-tests, integration-tests, performance-tests, api-tests, quality-checks]
    if: always()
    
    steps:
      - name: Generate test summary
        run: |
          echo "## 🧪 Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Unit Tests: ${{ needs.unit-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "### Widget Tests: ${{ needs.widget-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "### Integration Tests: ${{ needs.integration-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "### Performance Tests: ${{ needs.performance-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "### API Tests: ${{ needs.api-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "### Quality Checks: ${{ needs.quality-checks.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📊 **Total Test Coverage**: Check artifacts for detailed reports" >> $GITHUB_STEP_SUMMARY